This ZenPack provides support for monitoring Microsoft Windows. Monitoring is performed using the Windows Remote Management (WinRM) and Windows Remote Shell (WinRS) to collect Windows Management Instrumentation (WMI) and Perfmon data.

{{note}} This ZenPack supersedes the earlier ZenPack named ''ZenPacks.zenoss.WindowsMonitor'' for Windows platforms that support WinRM. If you have ''ZenPacks.zenoss.WindowsMonitor'' installed on your system, please read the [[#Transitioning from WindowsMonitor]] section below.

== Video ==
{{#widget:YouTube|id=kP28F_aQ77E|width=640|height=360}}

== Gallery ==
<gallery widths=250px heights=127px>
windows_device.png
windows_filesystem.png
windows_graphs.png
windows_infrastructure.png
windows_interfaces.png
windows_processors.png
windows_routes.png
windows_services.png
</gallery>

== Features ==

The features added by this ZenPack can be summarized as follows. They are each detailed further below.

* Initial discovery and periodic remodeling of relevant components.
* Performance monitoring.
* Event management.
* Custom Commands

=== Discovery ===

The following components will be automatically discovered through the Windows server address, username and password you provide. The properties and relationships will be periodically updated by modeling.

[[File:windows_device.png|thumb|320px|Device]]
[[File:windows_services.png|thumb|320px|File systems]]
[[File:windows_interfaces.png|thumb|320px|Interfaces]]

;Server (Device)
: Attributes: Name, Contact, Description, Serial Number, Tag, Hardware Model, Physical Memory, Total Virtual Memory, Operating System, Cluster

;Cluster (Device)
: Attributes: Name, Contact, Description, Physical Memory, Total Virtual Memory, Operating System, Member Servers

;Processors
: Attributes: Name, Description, Model, Socket, Cores, Threads, Clock Speed, External Speed, Voltage, L1 Cache Size, L2 Cache Size and Speed, L3 Cache Size and Speed

;File System
: Attributes: Mount Point, Status, Storage Device, Type, Block Size, Total Blocks, Total Bytes, Maximum Name Length

;Interfaces
: Attributes: Name, Description, MAC Address, MTU, Speed, Duplex, Type, Administrative Status, Operational Status, IP Addresses

;Network Routes
: Attributes: Destination, Next Hop, Interface, Protocol, Type

;Process Sets
: Attributes: Name, Recent Matches, Process Class

;Software
: Attributes: Name, Vendor, Installation Date

;Services
: Attributes: Name, Display Name, Start Mode, Account

;Cluster Services
: Attributes: Name, Core Group, Owner Node, State, Description, Priority
: Relationships: Cluster Resources

;Cluster Resources
: Attributes: Name, Owner Node, Description, Owner Group, State
: Relationships: Cluster Service

;Cluster Nodes
: Attributes: Name, Assigned Vote, Current Vote, State
: Relationships: Cluster Disks, Cluster Interfaces

;Cluster Networks
: Attributes: Name, Description, State

;Cluster Disks
: Attributes: Name, Owner Node, Volume Path, Disk Number, Partition Number, Capacity, Free Space, State
: Relationships: Cluster Nodes

;Cluster Interfaces
: Attributes: Name, Owner Node, Network, IP Addresses, Adapter, State
: Relationships: Cluster Nodes

;IIS Sites
: Attributes: Name, Status, App Pool

;SQL Server Instances
: Attributes: Name
: Relationships: SQL Server Databases

;SQL Server Databases
: Attributes: Name, Version, Owner, Last Backup, Last Log Backup, Accessible, Collation, Creation Date, Default File Group, Primary File Path, Recovery Model, Is System Object
: Relationships: SQL Server Instance

;SQL Server Backups
: Attributes: Name, Device Type, Physical Allocation, Status
: Relationships: SQL Server Instance

;SQL Server Jobs
: Attributes: Name, Job ID, Description, Enabled, Date Created, Username
; Relationships: SQL Server Instance

<br clear=all>

=== Performance Monitoring ===

Perfmon counters are collected using the PowerShell Get-Counter Cmdlet within a remove shell (WinRS). The following metrics will be collected every 5 minutes by default. Any other Windows Perfmon counters can also be collected by adding them to the appropriate monitoring template.

[[File:windows_graphs.png|thumb|320px|Device-level graphs]]
[[File:windows_filesystem.png|thumb|320px|File systems]]

;Device
* \Memory\Available bytes
* \Memory\Committed Bytes
* \Memory\Pages Input/sec
* \Memory\Pages Output/sec
* \Paging File(_Total)\% Usage
* \Processor(_Total)\% Privileged Time
* \Processor(_Total)\% Processor Time
* \Processor(_Total)\% User Time
* \System\System Up Time

;File Systems
* \Disk Read Bytes/sec
* \% Disk Read Time
* \Disk Write Bytes/sec
* \% Disk Write Time
* \Free Megabytes

;Interfaces
* \Bytes Received/sec
* \Bytes Sent/sec
* \Packets Received Errors
* \Packets Received/sec
* \Packets Outbound Errors
* \Packets Sent/sec

;Active Directory
* \NTDS\DS Client Binds/sec
* \NTDS\DS Directory Reads/sec
* \NTDS\DS Directory Searches/sec
* \NTDS\DS Directory Writes/sec
* \NTDS\DS Monitor List Size
* \NTDS\DS Name Cache hit rate
* \NTDS\DS Notify Queue Size
* \NTDS\DS Search sub-operations/sec
* \NTDS\DS Server Binds/sec
* \NTDS\DS Server Name Translations/sec
* \NTDS\DS Threads in Use
* \NTDS\KDC AS Requests
* \NTDS\KDC TGS Requests
* \NTDS\Kerberos Authentications
* \NTDS\LDAP Active Threads
* \NTDS\LDAP Bind Time
* \NTDS\LDAP Client Sessions
* \NTDS\LDAP Closed Connections/sec
* \NTDS\LDAP New Connections/sec
* \NTDS\LDAP New SSL Connections/sec
* \NTDS\LDAP Searches/sec
* \NTDS\LDAP Successful Binds/sec
* \NTDS\LDAP UDP operations/sec
* \NTDS\LDAP Writes/sec
* \NTDS\NTLM Authentications
* \NTDS\DS Client Binds/sec
* \NTDS\DS Directory Reads/sec
* \NTDS\DS Directory Searches/sec
* \NTDS\DS Directory Writes/sec
* \NTDS\DS Monitor List Size
* \NTDS\DS Name Cache hit rate
* \NTDS\DS Notify Queue Size
* \NTDS\DS Search sub-operations/sec
* \NTDS\DS Server Binds/sec
* \NTDS\DS Server Name Translations/sec
* \NTDS\DS Threads in Use
* \NTDS\LDAP Active Threads
* \NTDS\LDAP Bind Time
* \NTDS\LDAP Client Sessions
* \NTDS\LDAP Closed Connections/sec
* \NTDS\LDAP New Connections/sec
* \NTDS\LDAP New SSL Connections/sec
* \NTDS\LDAP Searches/sec
* \NTDS\LDAP Successful Binds/sec
* \NTDS\LDAP UDP operations/sec
* \NTDS\LDAP Writes/sec
* \DirectoryServices(NTDS)\DS Client Binds/sec
* \DirectoryServices(NTDS)\DS Directory Reads/sec
* \DirectoryServices(NTDS)\DS Directory Searches/sec
* \DirectoryServices(NTDS)\DS Directory Writes/sec
* \DirectoryServices(NTDS)\DS Monitor List Size
* \DirectoryServices(NTDS)\DS Name Cache hit rate
* \DirectoryServices(NTDS)\DS Notify Queue Size
* \DirectoryServices(NTDS)\DS Search sub-operations/sec
* \DirectoryServices(NTDS)\DS Server Binds/sec
* \DirectoryServices(NTDS)\DS Server Name Translations/sec
* \DirectoryServices(NTDS)\DS Threads in Use
* \DirectoryServices(NTDS)\LDAP Active Threads
* \DirectoryServices(NTDS)\LDAP Bind Time
* \DirectoryServices(NTDS)\LDAP Client Sessions
* \DirectoryServices(NTDS)\LDAP Closed Connections/sec
* \DirectoryServices(NTDS)\LDAP New Connections/sec
* \DirectoryServices(NTDS)\LDAP New SSL Connections/sec
* \DirectoryServices(NTDS)\LDAP Searches/sec
* \DirectoryServices(NTDS)\LDAP Successful Binds/sec
* \DirectoryServices(NTDS)\LDAP UDP operations/sec
* \DirectoryServices(NTDS)\LDAP Writes/sec

{{note}} The Active Directory monitoring template will only be used when the NTDS service is found during modeling.

;Exchange 2003
* \MSExchangeIS Mailbox(_Total)\Folder opens/sec
* \MSExchangeIS Mailbox(_Total)\Local delivery rate
* \MSExchangeIS Mailbox(_Total)\Message Opens/sec
* \MSExchangeIS\RPC Averaged Latency
* \MSExchangeIS\RPC Operations/sec
* \MSExchangeIS\RPC Requests
* \SMTP Server(_Total)\Local Queue Length
* \SMTP Server(_Total)\Messages Delivered/sec

;Exchange 2007 & 2010
* \MSExchangeIS Mailbox(_Total)\Folder opens/sec
* \MSExchangeIS Mailbox(_Total)\Local delivery rate
* \MSExchangeIS Mailbox(_Total)\Message Opens/sec
* \MSExchangeIS\RPC Averaged Latency
* \MSExchangeIS\RPC Operations/sec
* \MSExchangeIS\RPC Requests
* \MSExchangeTransport Queues(_Total)\Active Mailbox Delivery Queue Length
* \MSExchangeTransport SmtpSend(_Total)\Messages Sent/sec

;Exchange 2013
* \MSExchangeIS Store(_Total)\Folders opened/sec
* \MSExchangeIS Store(_Total)\Messages Delivered/sec
* \MSExchangeIS Store(_Total)\Messages opened/sec
* \MSExchange Store Interface(_Total)\RPC Latency average (msec)
* \MSExchange Store Interface(_Total)\RPC Requests sent/sec
* \MSExchange Store Interface(_Total)\RPC Requests sent
* \MSExchangeTransport Queues(_Total)\Active Mailbox Delivery Queue Length
* \MSExchange Delivery SmtpSend(_Total)\Messages Sent/sec

{{note}} If monitoring Exchange with a non-administrator user, the user must be a member of the Active Directory group "Exchange View-Only Administrators" for pre-2010 Exchange installations or "View Only Organization Management" for 2010 and later installations.

; IIS
* \Web Service(_Total)\Bytes Received/sec
* \Web Service(_Total)\Bytes Sent/sec
* \Web Service(_Total)\CGI Requests/sec
* \Web Service(_Total)\Connection Attempts/sec
* \Web Service(_Total)\Copy Requests/sec
* \Web Service(_Total)\Delete Requests/sec
* \Web Service(_Total)\Files Received/sec
* \Web Service(_Total)\Files Sent/sec
* \Web Service(_Total)\Get Requests/sec
* \Web Service(_Total)\Head Requests/sec
* \Web Service(_Total)\ISAPI Extension Requests/sec
* \Web Service(_Total)\Lock Requests/sec
* \Web Service(_Total)\Mkcol Requests/sec
* \Web Service(_Total)\Move Requests/sec
* \Web Service(_Total)\Options Requests/sec
* \Web Service(_Total)\Other Request Methods/sec
* \Web Service(_Total)\Post Requests/sec
* \Web Service(_Total)\Propfind Requests/sec
* \Web Service(_Total)\Proppatch Requests/sec
* \Web Service(_Total)\Put Requests/sec
* \Web Service(_Total)\Search Requests/sec
* \Web Service(_Total)\Trace Requests/sec
* \Web Service(_Total)\Unlock Requests/sec

;IIS Sites
* \Bytes Received/sec
* \Bytes Sent/sec
* \CGI Requests/sec
* \Connection Attempts/sec
* \Copy Requests/sec
* \Connection Attempts/sec
* \Delete Requests/sec
* \Files Received/sec
* \Files Sent/sec
* \Get Requests/sec
* \Head Requests/sec
* \ISAPI Extension Requests/sec
* \Lock Requests/sec
* \Mkcol Requests/sec
* \Move Requests/sec
* \Options Requests/sec
* \Other Request Methods/sec
* \Post Requests/sec
* \Propfind Requests/sec
* \Proppatch Requests/sec
* \Put Requests/sec
* \Search Requests/sec
* \Trace Requests/sec
* \Unlock Requests/sec

{{note}} The IIS monitoring template will only be used when IIS is found during modeling.

{{note}} The IISAdmin service must be running in order to collect IIS data.

The following metrics are collected directly via WMI.

;Processes (Win32_PerfFormattedData_PerfProc_Process)
* PercentProcessorTime
* WorkingSet
* WorkingSetPrivate (not available on Windows 2003)

<br clear=all>

{{note}} IIS 6 Management compatibility role no longer needs to be installed on the server side in order to use the IIS Sites component.

{{note}} IIS Management Scripts and Tools role needs to be installed on the server side in order to use the IIS Sites component.

=== SQL Server ===
The following performance counters are monitored via Powershell script per database:

* \SQLServer:Databases(<dbname>)\Active Transactions
* \SQLServer:Databases(<dbname>)\Backup/Restore Throughput/sec
* \SQLServer:Databases(<dbname>)\Bulk Copy Rows/sec
* \SQLServer:Databases(<dbname>)\Bulk Copy Throughput/sec
* \SQLServer:Databases(<dbname>)\Cache Entries Count
* \SQLServer:Databases(<dbname>)\Cache Entries Pinned Count
* \SQLServer:Databases(<dbname>)\Cache Hit Ratio
* \SQLServer:Databases(<dbname>)\Cache Hit Ratio Base
* \SQLServer:Databases(<dbname>)\DBCC Logical Scan Bytes/sec
* \SQLServer:Databases(<dbname>)\Data File(s) Size (KB)
* \SQLServer:Databases(<dbname>)\Log Bytes Flushed/sec
* \SQLServer:Databases(<dbname>)\Log Cache Hit Ratio
* \SQLServer:Databases(<dbname>)\Log Cache Hit Ratio Base
* \SQLServer:Databases(<dbname>)\Log Cache Reads/sec
* \SQLServer:Databases(<dbname>)\Log File(s) Size (KB)
* \SQLServer:Databases(<dbname>)\Log File(s) Used Size (KB)
* \SQLServer:Databases(<dbname>)\Log Flush Wait Time
* \SQLServer:Databases(<dbname>)\Log Flush Waits/sec
* \SQLServer:Databases(<dbname>)\Log Flushes/sec
* \SQLServer:Databases(<dbname>)\Log Growths
* \SQLServer:Databases(<dbname>)\Percent Log Used
* \SQLServer:Databases(<dbname>)\Log Shrinks
* \SQLServer:Databases(<dbname>)\Log Truncations
* \SQLServer:Databases(<dbname>)\Percent Log Used
* \SQLServer:Databases(<dbname>)\Repl. Pending Xacts
* \SQLServer:Databases(<dbname>)\Repl. Trans. Rate
* \SQLServer:Databases(<dbname>)\Shrink Data Movement Bytes/sec
* \SQLServer:Databases(<dbname>)\Transactions/sec

You can enable/disable any of these or change the cycle time by editing the WinDatabase monitoring template.

The WinDBInstance monitoring template will monitor the status of a SQL Server instance to inform the user if it is up or down.

The WinSQLJob monitoring template will monitor the status of a job on a SQL Server instance to inform the user if it has succeeded, failed, unknown, or other state.

=== Thresholds ===

The following thresholds are set by default on the device monitoring template and will trigger an alert if they are reached

* CPU Utilization - 90% used
* Paging File Usage - 95% used
* Memory - 90% of total memory used

=== Event Management ===
Events could be collected from the Windows event log using a WinRM subscription. Events collected through this mechanism will be timestamped based on the time they occurred within the Windows event log. Not by the time at which they were collected.

To monitor EventLog events you should add to monitoring template with "Windows EventLog" datasource. For the Event Log field put the name of event log (e.g. "System") that you are interested in, and in the EventQuery you could put the filter for events. The filter can be either a PowerShell Where-Object block or XPath XML taken from a Windows Event Viewer Custom View.

The default Get-WinEvent xml filter returns all events from the last polling cycle.  This list can be searched for specific Ids, severity, or specific words in the message using PowerShell.

* To target all events with a Warning or higher severity:

[[File:CustomViewOptions.png|thumb|250px|CustomViewOptions]]
For Windows 2003: <code>{ $$_.EntryType -le [System.Diagnostics.EventLogEntryType]::Warning}</code>

<code>$$_</code> is the event object of EventLogEntry class. <code>EntryType</code> is the attribute which determines severity, and could contain one of the following values: <code>Error, Warning, Information, SuccessAudit,<code> or</code> <code>FailureAudit</code>. Also it has such attributes as <code>Message, MachineName, TimeGenerated, Source</code>. Full list you could find at http://msdn.microsoft.com/en-us/library/vstudio/system.diagnostics.eventlogentry .

Note: This query is structured to look for "less than," although we are looking for events "greater than" in severity. This is because the EntryType is an enumeration where the integer values map to 1= Error, 2 = Warning, etc. This means lower numbers indicate higher severity.

For Windows 2008 & Later:

<code>{ $$_.Level -le [System.Diagnostics.Eventing.Reader.StandardEventLevel]::Warning}</code>

<code>{ $$_.Id -eq 4001}</code>

<code>$$_</code> is the event object of EventLogRecord class. <code>Level</code> is the severity of the event.  <code>Id</code> is the property to compare for specific event ids.  You can find the full listing of properties at https://technet.microsoft.com/en-us/library/Hh849682.aspx.

[[File:CustomViewXML.png|thumb|250px|CustomViewXML]]
The full list of event levels can be found at http://msdn.microsoft.com/en-us/library/system.diagnostics.eventing.reader.standardeventlevel%28v=vs.110%29.aspx

For more information about the System.Diagnostics.Eventing.Reader class, you could read http://msdn.microsoft.com/en-us/library/system.diagnostics.eventing.reader(v=vs.110).aspx

And to know more about writing PowerShell conditions, you could read http://www.powershellpro.com/powershell-tutorial-introduction/powershell-tutorial-conditional-logic/ 

* To use the xml query from a custom view in Windows Event Viewer, simply copy the xml and paste into the Event Query field of the event data source.  Because we use a polling cycle to query the event log, any TimeCreated filter will be replaced by us to avoid duplicate events.

For example, a custom view that searches for events in the last hour, with severity of Warning or Critical, and Ids of 104, 110-115, 155 will result in the following XPath query:
[[File:EventDatasourceXML.PNG|thumb|250px|EventDatasourceXML]]
    <QueryList>
      <Query Id="0" Path="Application">
        <Select Path="Application">*[System[(Level=1  or Level=3) and (EventID=104 or  (EventID &gt;= 110 and EventID &lt;= 115)  or EventID=155) and TimeCreated[timediff(@SystemTime) &lt;= 3600000]]]</Select>
      </Query>
    </QueryList>

Simply copy this and paste into the eventlog datasource Event Query field and save.  We will convert the TimeCreated query and the following filter will be used:

    <QueryList>
      <Query Id="0" Path="Application">
        <Select Path="Application">*[System[(Level=1  or Level=3) and (EventID=104 or  (EventID &gt;= 110 and EventID &lt;= 115)  or EventID=155) and TimeCreated[timediff(@SystemTime) &lt;= {time}]]]</Select>
      </Query>
    </QueryList>

'{time}' will be replaced by the number of milliseconds since the last query.

{{note}} The script to search for events and return relevant data is approximately 3700 characters.  Due to the Windows 8192 character limit on the shell, any XML or PowerShell queries will need to be less than 4400 characters.

{{note}} The query for Windows 2008 and later uses the Get-WinEvent PowerShell cmdlet.  In order to use this cmdlet, PowerShell on your Windows server must use .NET 3.5 or higher.  If it does not, then we will revert to using the Get-EventLog cmdlet, which does not use an XML filter.

To change event severity follow the steps:
# go to IIS Site events, and click on '/Status' event class.
# find 'EventClass Mappings' section and click on 'IISSiteStatus' link
# click the ''Edit'' button
# in the 'Transform' section, add "<code>evt.severity = <severity number(see link http://community.zenoss.org/docs/DOC-3923 in the '#7.1.1.3. severity Field' section)></code>" at the bottom
# click the ''Save'' button

=== Custom Commands ===
You can use the custom command datasource in the Windows ZenPack to create custom data points, graphs and thresholds.

* Use either DOS shell commands or Powershell script
** Use any valid Windows executable or Powershell cmdlet
** Powershell commands separated by ';'.  Always end script with ';'
** For tales eval, surround by single quotes.  e.g. '${here/id}'
** For Powershell variables, use 2 '$'.  e.g. $$myvar = 10
** There is a character limit of 8192 imposed by Microsoft.  Zenoss header is ~450 characters so you have about 7500 characters for your script.
* Use standard parser to parse the output or create your own
** Nagios have the form <key>=<value>
** JSON - script must put data into JSON format
** Auto will save a returned value into a data point.
** Create custom parser in $ZENOSS_HOME/Products/ZenRRD/parsers/
* Viewing script output
** Create datapoint(s) to collect the data for graphing
** Create custom parser to send event or transform data

==== Example usage ====

;Script with TALES expression
# Select a windows target device
# Navigate to Device (/Server/Microsoft)
# On the right side panel, click '+' to add a 'Windows Shell' datasource
# Provide name (eg. custom) and type (Windows Shell) for the datasource
# View Edit and Details
# Set strategy to custom command
# Set parser to Nagios
# Uncheck Use Powershell
# Set script to echo 'OK^|value1=${here/zWinPerfmonInterval}'
# Add data point to data source called value1 which can be graphed

;Using a custom parser
Logon to the zenoss server and create a python file called test1.py in /opt/zenoss/Products/ZenRRD/parsers and restart zenoss

The content of test1.py

 <nowiki>
from Products.ZenRRD.CommandParser import CommandParser
 class test1(CommandParser):
    def processResults(self, cmd, result):
        result.events.append({
            'summary':'test1 parser event',
            'severity': 5,
            'test1.detail': cmd.deviceConfig.name,
            })
</nowiki>

# Select a windows target device
# Navigate to Device (/Server/Microsoft)
# On the rigt side panel, click '+' to add a 'Windows Shell' datasource
# Provide name (eg. custom) and type (Windows Shell) for the datasource
# View Edit and Details : strategy ->custom command and parser is test1
# Run zenpython to collect the data zenpython run -v10 -d <devicename>
# Check events after 5 minutes for the test1 event

;Powershell Scripting using Auto parser

# Select a windows target device
# Navigate to Device (/Server/Microsoft)
# On the right side panel, click '+' to add a 'Windows Shell' datasource
# Provide name (eg. custom) and type (Windows Shell) for the datasource
# View Edit and Details : strategy ->custom command, parser is Auto, and tick the Use Powershell box
# Enter script.  Be sure to use a double dollar sign, '$$', in order to distinguish any powershell specific variables from a TALES expression.
# Add a datapoint to collect the return value from the script which you can then graph

== DCDiag ==

Beginning with version 2.4.0, you can now monitor the output of DCDiag.  By default all dcdiag tests are enabled in the Active Directory monitoring template.  If a test fails an error event is issued.  You can also add other tests, such as DNS, and supply specific test parameters.

See https://technet.microsoft.com/en-us/library/cc731968.aspx for more information on DCDiag.

{{note}} DCDiag must be run as a user with Administrator permissions.  If you will be monitoring a Domain Controller with a non administrator user, you should disable these tests.

== PortCheck ==

Beginning with version 2.4.0, you can now monitor specific ports in the Windows Zenpack.  By default, the ZenPack will monitor ports 9389, 3268, 3269, 88, 464, 389, 636, 445, 135, and 3389, as part of the Active Directory monitoring template.

You can add and remove any port you wish to be monitored by editing the PortCheck datasource in the Active Directory monitoring template.

To monitor ports on a Windows server that is not a domain controller, simply create a new datasource and choose Windows PortCheck as the type.  Then add the ports you wish to monitor with a short description of each.

See https://technet.microsoft.com/en-us/library/dd772723(v=ws.10).aspx for more information on Active Directory port usage.

== WinRM Ping ==

Device status relies on ping status, but if a target's IP has been reassigned to a non-Windows device, it is still pingable and will show as Up.  WinRM Ping is a simple datasource that will attempt to retrieve data over winrm.  If it fails, then we will send a Device Down message to '/Status/Ping', which will set the device status to down.

== Requirements ==

This ZenPack has the following requirements.

;[[ZenPack:PythonCollector|PythonCollector ZenPack]]
: This ZenPack depends on [[ZenPack:PythonCollector|PythonCollector]] being installed, and having the associated ''zenpython'' collector process running.

;System Kerberos RPM
: The operating system's kerberos RPM must be installed. See the [[#Installing_Kerberos_Dependency]] section for details.

=== Installing Kerberos Dependency ===

To use kerberos authentication the operating system's kerberos package must be installed on all Zenoss servers. On Enterprise Linux (Red Hat and CentOS) this is the ''krb5-workstation'' RPM and can typically be installed by running the following command as the ''root'' user.

<console>
yum -y install krb5-workstation
</console>

== Usage ==

=== Adding a Windows Device ===

Use the following steps to start monitoring a Windows server using local authentication in the Zenoss web interface.

# Navigate to the Infrastructure page.
# Select the Server/Microsoft/Windows device class.
#* The Windows server must be added to this class or to a child of this class.
# Click Details and set the configuration properties for zWinRMUser and zWinRMPassword.
# Click See All.
# Choose ''Add Single Device'' from the add device button.
# Fill out the form.
#* ''Name or IP'' must be resolvable and accessible from the collector server chosen in the ''Collector'' field.
# Click ''ADD''.

----

Alternatively you can use zenbatchload to add Windows servers from the command line. To do this, you must create a text file with hostname, username and password of all the servers you want to add. Multiple endpoints can be added under the same ''/Devices/Server/Microsoft/Windows'' section. Here is an example...

<syntaxhighlight lang="text">
/Devices/Server/Microsoft/Windows
win2008-1d.example.com zWinRMUser="Administrator", zWinRMPassword="password"
Win2012-1d.example.com zWinRMUser="Administrator", zWinRMPassword="password"
</syntaxhighlight>

You can then load the Windows servers into Zenoss Core or Resource Manager as devices with the following command.

<syntaxhighlight lang="bash">
zenbatchload <filename>
</syntaxhighlight>

=== Configuration Options ===

The [[#Adding a Windows Device]] steps shown above are for the simplest case of using Windows local authentication. The following configuration properties can be used to support monitoring other environments.

;zWinRMUser
: The syntax used for zWinRMUser controls whether Zenoss will attempt Windows local authentication or domain (kerberos) authentication. If the value of zWinRMUser is ''username'', local Windows authentication will be used. If zWinRMUser is ''username@example.com'', domain authentication will be used. The zWinKDC and potentially the zWinRMServerName properties become important.

;zWinRMPassword
: Password for user defined by ''zWinRMUser''.

;zWinKDC
: The zWinKDC property must be set if domain authentication is used. It must be the IP address or resolvable name of a valid Windows domain controller.

;zWinTrustedRealm
: Enter the name of the domain which is trusted by the user's domain.  This can be a child or other domain which has a trust relationship with the user's domain.  For example, if zWinRMUser is ''username@example.com'', and austin.example.com is a child of the example domain, enter ''austin.example.com'' into zWinTrustedRealm.

;zWinTrustedKDC
: This property must be set if zWinTrustedRealm is set.  It must be the IP address or resolvable name of a valid Windows domain controller for the trusted realm.

;zWinRMServerName
: This property should only be used in conjunction with domain authentication when the DNS PTR record for a monitored server's managed IP address does not resolve to the name by which the server is known in Active Directory. For example, if myserver1 is known as myserver1.ad.example.com by Active Directory and is being managed by IP address 192.51.100.21, but 192.51.100.21 resolves to www.example.com, you will have to set zWinRMServerName to ''myserver1.ad.example.com'' for domain authentication to work.

: If many Windows servers in your environment don't have DNS PTR records that match Active Directory, it is recommended that you set the name of the Zenoss device's to be the fully-qualified Active Directory name and set zWinRMServerName to ''${here/titleOrId}'' at the /Server/Microsoft/Windows device class. This avoids the necessity of setting zWinRMServerName on every device.

: It is recommended to leave zWinRMServerName blank if local authentication is used, or DNS PTR records match Active Directory. This allows Zenoss to not rely on DNS resolution while monitoring, and avoids the overhead of configuring zWinRMServerName.

;zWinScheme
: This must be set to either ''http'' or ''https''. The default is ''http''.

;zWinRMPort
: The port on which the Windows server is listening for ''WinRM'' or ''WS-Management'' connections. The default is ''5985''. It is uncommon for this to be configured as anything else.

;zWinPerfmonInterval
: The default interval in seconds at which ''Windows Perfmon'' datapoints will be collected. The default is ''300'' seconds or 5 minutes. It is also possible to override the collection interval for individual counters.

;zWinKeyTabFilePath
: This property is currently used and reserved for future use when keytab files are supported.

;zDBInstances
: This setting is only relevant when the ''zenoss.winrm.WinMSSQL'' modeler plugin is enabled. Multiple instances can be specified to monitor multiple SQL Server instances per server using different credentials. The default instance is ''MSSQLSERVER''. Fill in the user and password to use SQL authentication. Leave the user and password blank to use Windows authentication.  The default ''MSSQLSERVER'' credentials will be used for all instances not specified.

{{note}} HyperV and MicrosoftWindows ZenPacks share krb5.conf file as well as tools for sending/receiving data. Therefore if either HyperV or Windows device has a correct zWinKDC setting, it will be used for another device as well.

=== Configuring Service Monitoring ===

There are multiple ways to configure Windows service monitoring depending on if you want to configure for a single service on a single server, a specific service across all Windows servers, all 'Auto' start services, or somewhere in between.

[[File:winservice.png|thumb|320px|WinService]]

See the following examples:

;Enable or disable monitoring for a single service on a single server.
# Navigate to the service on the server.
# Click to select it.
# Choose ''Monitoring'' from the gear menu.
# Choose Yes or No depending on what you want.

;Enable monitoring by default for the WinRM service wherever it is enabled.
# Navigate to Advanced -> Monitoring Templates.
# Verify the list of templates is grouped by template.
# Expand the ''WinService'' tree.
# Click once to select the ''/Server/Microsoft'' copy.
# Choose ''Copy / Override Template'' from the Template gear menu at the bottom left of the page.
# Select ''/Server/Microsoft (Create Copy)'' from the target list then click submit.
# Expand the resulting ''copy_of_WinService'' tree.
# Select the ''/Server/Microsoft'' copy.
# Choose ''View and Edit Details'' from the Template gear menu at the bottom left of the page.
# Change the template's name to ''WinRM''.
# Tick the ''Auto'' checkbox under ''Service Options'' and click save.

;Enable/Disable monitoring by default for the WinRM service for a select group of servers.
# Create a new device class somewhere under ''/Server/Microsoft/Windows'' for the select group of servers.
# Move the servers to the new device class.
# Follow steps 1-5 from the previous section.
# Choose your new device class as the target then click submit.
# Expand the ''WinService'' tree then select the copy in your device class.
# Choose ''View and Edit Details'' from the gear menu at the bottom left of the page.
# Change the template's name to ''WinRM'' then click submit.
# Double-click to edit the ''DefaultService' datasource.
# Tick/Untick the ''Auto'' checkbox under ''Service Options'' and click save.

;Enable monitoring of all services with a start mode of 'Auto'.
# Navigate to Advanced -> Monitoring Templates.
# Verify the list of templates is grouped by template.
# Expand the ''WinService'' tree.
# Select ''/Server/Microsoft''.
# In the Data Sources pane, click the + button to add a new data source, give it a name, and choose Windows Service as the type.
# Choose ''View and Edit Details'' from the Data Sources gear menu.
# Tick the ''Auto'' checkbox under ''Service Options'' and click save.
# You can optionally exclude certain services to be monitored when selecting the ''Auto'', ''Manual'', and/or ''Disabled'' start mode(s) by entering a comma separated list of services.  These must be the service names and are case insensitive.

{{note}} To enable monitoring by default of a service or services, you must choose a start mode by ticking the appropriate box.  Unticking all three boxes disables monitoring by default.

{{note}} When saving changes to a service template, the changes may take several minutes to propogate to all of your devices.

{{note}} The WinService datasource no longer depends on the 'DefaultService' data source name.

<br clear=all>

=== Configuring MSSQL Server Modeling/Monitoring ===

; Supported SQL Server versions:
: SQL Server 2005
: SQL Server 2008
: SQL Server 2008 R2
: SQL Server 2012

; Support for SQL Server and Windows Authentication:
* Windows Authentication: In ''zDBInstances'' property specify only SQL instances names, leave user and password fields blank.
* SQL Server Authentication: In ''zDBInstances'' property provide user name and password for each SQL instance.
* Specifying authentication per instance is no longer required with version 2.4.2 and above.  We will use the credentials specified for the MSSQLSERVER instance by default.

Use the following steps to configure SQL Server Authentication on your SQL Server:
# Connect to SQL Instance using MSSQL Management Studio.
# Select instance ''Properties'' > ''Security'' and make sure that ''SQL Server and Windows Authentication mode'' is enabled.
# Open ''Security'' > ''Logins'', select the user, you specified in ''zDBInstances'' property.
# Check user ''Properties'' > ''Status'' and make sure that the user is Enabled.
# Check user ''Properties'' > ''Server Roles'' and make sure that the user has ''sysadmin'' and ''public'' roles.

; Support for Local and Failover Cluster SQL instances:

This ZenPack adds support for both local and failover cluster SQL Server instances.
Local SQL Server instances can be modeled/monitored within windows devices (devices in ''Server/Microsoft/Windows'' device class).
SQL Server failover cluster instances can be modeled/monitored within cluster devices (devices in ''Server/Microsoft/Cluster'' device class).

: Use the following steps to model/monitor SQL Server instances:
# Create a device in ''Server/Microsoft/Windows'' device class if you intend to model local SQL instances, or in ''Server/Microsoft/Cluster'' device class if you intend to model failover cluster instances.
# Optionally specify the instance names to be modeled in ''zDBInstances'' zProperty. Provide user names and passwords if SQL Server Authentication is to be used.
# Enable ''zenoss.winrm.WinMSSQL'' modeler plugin.
# Remodel device.

; SQL Server Monitoring

The monitoring templates for SQL Server are component templates so there is no need to perform a bind.  They will automatically be used to monitor databases, instances, and jobs.

{{note}} The default instance of MSSQLSERVER will appear as only the server name starting with version 2.4.8.

{{note}} The authenticated user will need to be granted permission to view the server state.  For example, "GRANT VIEW SERVER STATE TO 'MYDOMAIN\zenoss_user'" or through the GUI in SQL Server Management Studio.

=== Working with WinCommand Notification Action ===

This ZenPack adds a new event notification action that can be used by the zenactiond daemon to allow an arbitrary command to be executed on the remote windows machine.

Use the following steps to set up a notification:
# Select ''Events'' > ''Triggers'' from the Navigation Menu.
# Create a trigger, selecting the rules that define it.
# Select ''Notifications'' from the left panel. Add a new notification, enter a name for it and select ''WinCommand'' Action from the drop-down menu. Click Submit.
# In the ''Edit Notification'' dialog on the ''Notification'' tab associate the trigger with the notification and optionally select the notification properties (Enabled, Send Clear, Send only on Initial Occurrence, Delay, Repeat).
On the ''Content'' tab of the notification specify the 'Windows CMD Command'' to run when configured triggers are matched. You may optionally specify ''Clear Windows CMD Command'' to run when the triggering event clears.
# Submit changes.

For more information please refer to [http://community.zenoss.org/docs/DOC-10690 Working with Triggers and Notifications]

== <span id="winrm_setup">Setting up WinRM Service for Target Windows Machines</span> ==

Group Policy

Computer Configuration\Policies\Administrative Templates\Windows Components\Windows Remote Management

WinRMClient
* No setting changes required for client

WinRMService
* Allow remote server management through WinRm

- HTTP (Windows default is HTTPS see note below for more information)
* Allow unencrypted Traffic (Only necessary when using basic authentication)

- Basic Authentication (Windows default is Kerberos see note below for more information)
* Allow Basic Authentication 

WinRS
Computer Configuration\Policies\Administrative Templates\Windows Components\Windows Remote Shell
* Allow Remote Shell Access
* Max number of processes per shell = 4294967295
* Max number of shells per user = 2147483647
* Shell Timeout = 7200000

Individual Machine configuration

* Open ports 5985 (http)/5986(https) for WinRM
* Run command prompt as Administrator
* winrm quickconfig

* winrm s winrm/config/service @{MaxConcurrentOperationsPerUser="4294967295"}
* winrm s winrm/config/winrs @{MaxShellsPerUser="2147483647"}
* winrm s winrm/config/winrs @{IdleTimeout="7200000"}

Basic Authentication (Windows default is Kerberos see note below for more information)
* winrm s winrm/config/service/auth @{Basic="true"}
* winrm s winrm/config/service @{AllowUnencrypted="true"}

{{note}} The above instructions use the max values for MaxConcurrentOperationsPerUser and WinRS MaxShellsPerUser. If you do not want to set these to the max, then a value of 50 should be adequate. The default is 5 on both, which will cause problems because Zenoss will open up concurrent requests for each WQL query and set of Perfmon counters.

{{note}} If you choose to use Basic authentication it is highly recommended that you also configure HTTPS. If you do not use the HTTPS protocol your user name and password will be sent over in clear text. If you have challenges setting up HTTPS on the Windows clients but require the user name and password to be encrypted, then using the Kerberos authentication is the best option. HTTPS is not required for Kerberos but is recommended. If you choose to use Kerberos authentication, then your payload will be encrypted.

{{note}} If you are using kerberos on EL6 and higher to connect to your Windows Server, your data will be encrypted over HTTP.  For kerberos on EL5, encryption is not supported so you must set the winrm AllowUnencrypted option to true.

{{note}} If you choose to take the WinRM default configurations you must supply Kerberos authentication settings in the zProperties. The Kerberos authentication process requires a ticket granting server. In the Microsoft Active Directory environment the AD Server is also the KDC. The zWinKDC value must be set to the IP address of the AD Server and the collector must be able to sent TCP/IP packets to this server. Once this is set your zWinRMUserName must be a FQDN such as jsmith@Zenoss.com and the zWinRMPassword must be set correctly for this user account.

{{note}} In order to use a single domain user in a child domain or other trusted domain, set zWinKDC to the AD server of the user's domain.  Then enter the trusted domain name and associated AD server in the zWinTrustedRealm and zWinTrustedKDC properties, respectively.

{{note}} The HTTPS setup must be completed on each client. At this time we do not have notes on automating this task but are currently in the process of testing several options. To successfully encrypt your payload between the Zenoss server and the Windows client you must install a Server Authentication certificate on the client machine. The process for requesting and installing the appropriate  certificate can be found at the following URL.
http://blogs.technet.com/b/meamcs/archive/2012/02/25/how-to-force-winrm-to-listen-interfaces-over-https.aspx
Once the client has the correct certificate installed you only need to change the zWinScheme to HTTPS and zWinRMPort to 5986. If you are still having challenges setting up HTTPS on the client you can execute the following command on any AD server to verify the appropriate SPN record exists for Kerberos authentication.

<console>
c:\>setspn -l hostname1
</console>

If you do not see a record with HTTPS/ at the beginning of the hostname you can create the record, but this is not typically necessary as Windows will use the HOST/ record as the default for most built in services.

<console>
c:\>setspn -s HTTPS/hostname1.zenoss.com hostname1
</console>

== Transitioning from WindowsMonitor ==

If you are installing this ZenPack on an existing Zenoss system or upgrading from an earlier Zenoss version you may have a ZenPack named ''ZenPacks.zenoss.WindowsMonitor'' already installed on your system. You can check this by navigating to Advanced -> ZenPacks.

This ZenPack functionally supersedes ''ZenPacks.zenoss.WindowsMonitor'' for Windows platforms that support WinRM, but does not automatically migrate monitoring of your Microsoft Windows resources when installed. The ZenPacks can coexist gracefully to allow you time to manually transition monitoring to the newer ZenPack with better capabilities.

# Navigate to the Infrastructure page.
# Expand the Server/Windows/WMI device class.
# Single-click to select a Windows device.
# Click the delete (''-'') button in the bottom-left.
# Click OK to confirm deleting the Windows device.
# Add the device back using the [[#Adding a Windows Device]] instructions above. Be sure to select the /Server/Microsoft/Windows device class and not the /Server/Windows/WMI device class.
# Repeat steps 3-6 for each Windows device.

Old Windows ZenPacks:
* PySamba
* WindowsMonitor
* ActiveDirectory
* IISMonitor
* MSExchange
* MSMQMonitor
* MSSQLServer

New Windows ZenPacks:
* [[ZenPack:PythonCollector|PythonCollector]] is a requirement for this ZenPack. It provides the polling facility through the zenpython collector daemon.
* This ZenPack (all the functionality of the old Windows ZenPacks is rolled into this one ZenPack)

The old ZenPacks come as part of the Zenoss Core 4.2.x RPM. They can be installed on top of an RM install with the msmonitor RPM

=== Using Old and New Windows ZenPacks Together ===

There are some scenarios where it may be useful to use the old and new Windows ZenPacks together. In most cases this is as simple as putting servers you wish to be monitored by the new ZenPack in the /Server/Microsoft/Server device class and servers you wish to be monitored by the old ZenPack in the /Server/Windows/WMI device class.

Due to this ZenPack's dependency on WinRM 2.0 it is not possible to monitor Windows versions earlier than Windows 2003 SP1. If you have a requirement to monitor these earlier Windows versions you must use the older [[ZenPack::Microsoft_Windows|WindowsMonitor ZenPack]] that uses DCOM/RPC instead of WinRM.

There are also circumstances where you may currently be using the old Windows ZenPack and only want to initially use the new ZenPack for its new functionalities such as the ''Windows Shell'' datasource. This can be achieved using the following steps.

# Keep the servers under the /Server/Windows/WMI device class.
# Verify that all of the following configuration properties are set:
#* ''zWinUser'': In DOMAIN\Username format for DCOM/RPC collection.
#* ''zWinPassword'': Password for zWinUser account.
#* ''zWinRMUser'': In username@example.com format for WinRM collection.
#* ''zWinRMPassword'': Password for zWinRMUser account.
# Create a monitoring template containing a ''Windows Shell'' datasource and bind it to the server.

== Limitations of Current Release ==

The current release is known to have the following limitations.

* Support for team NICs is limited to Intel and Broadcom interfaces.
* The custom widget for MSSQL Server credentials is not compatible with Zenoss 4.1.x, therefore the ''zDBInstances'' property in this version should be set as a valid JSON list (e.g. ''[{"instance": "MSSQLSERVER", "user": "", "passwd": ""}]'' ).
* When upgrading to version 2.2.0, you may see a segmentation fault during the install.  This occurs when upgrading from versions 2.1.3 and previous.  To ensure a successful installation, run the install once more and restart Zenoss.
* Payload encryption is not supported on EL5 systems.  This is due to the fact that the default kerberos library on EL5 systems does not contain the necessary functionality.
* With the ending of support by Microsoft for Windows 2003, we will no longer support Windows 2003 starting with version 2.5.0 of the ZenPack.  Current functionality for monitoring Server 2003 has not been removed from the ZenPack, but no future development will be done around it.

A current list of known issues related to this ZenPack can be found with [https://jira.zenoss.com/issues/?jql=%22Affected%20Zenpack(s)%22%20%3D%20MicrosoftWindows%20AND%20status%20not%20in%20(closed%2C%20%22awaiting%20verification%22)%20ORDER%20BY%20priority%20DESC%2C%20id this JIRA query]. You must be logged into JIRA to run this query. If you don't already have a JIRA account, you can [https://jira.zenoss.com/secure/Signup!default.jspa create one here].

=== Manually Establishing Kerberos Tickets ===

In version 2.2.0 of the ZenPack it is now possible to add custom kerberos configurations if your settings differ from the default settings used by Zenoss.  To use a custom configuration file, place it in the $ZENHOME/var/krb5/config/ directory.  This option requires kerberos 5 release 1.10 and higher.

In version 2.0.0 of the ZenPack there is a problem in the automatic establishment of kerberos tickets required for monitoring Windows devices using kerberos authentication. This is only a problem on Enterprise Linux 5 (Red Hat or CentOS). It is not a problem on Enterprise Linux 6. The problem will typically manifest as the following error when attempting to model a Windows device.

{{note}} Note that these manual steps are not necessary in version 2.0.1 and later of the ZenPack.

<blockquote>
kerberos authGSSClientStep failed (None)
</blockquote>

It is possible to workaround this error by manually establishing the tokens using the following steps.

# Edit $ZENHOME/var/krb5/krb5.conf.
## Remove the ''includedir'' line.
## Add the following to the bottom of the file.

<pre>
[realms]
 EXAMPLE1.COM = {
  kdc = 192.168.77.77 #KDC IP Address or FQDN
  admin_server = 192.168.77.77 #KDC IP Address or FQDN
 }
 EXAMPLE2.COM = {
  kdc = 192.168.88.88 #KDC IP Address or FQDN
  admin_server = 192.168.88.88 #KDC IP Address or FQDN
 }

[domain_realm]
 .example1.com = EXAMPLE1.COM
 example1.com = EXAMPLE1.COM
 .example2.com = EXAMPLE2.COM
 example2.com = EXAMPLE2.COM
</pre>

This is an example of what would be required if you had two domains: example1.com and example2.com with domain controllers at 192.168.77.77 and 192.168.88.88 respectively. You can use a single domain or more than two. Be sure to use the same capitalization scheme.

== Service Impact ==

When combined with the Zenoss Service Dynamics product, this ZenPack adds built-in service impact capability for services running on Microsoft Windows. The following service impact relationships are automatically added. These will be included in any services that contain one or more of the explicitly mentioned entities.

;Service Impact Relationships
* The Windows server is impacted by the Processors and File Systems.

== Troubleshooting ==

Please refer the the Zenoss Service Dynamics documentation if you run into any of the following problems:

* ZenPack will not install
* Adding a device fails
* Don't understand how to add a device
* Don't understand how to model a device

If you cannot find the answer in the documentation, then Resource Manager (Service Dynamics) users should contact [https://support.zenoss.com Zenoss Customer Support]. Core users can use the #zenoss IRC channel or the community.zenoss.org forums (there is a forum specific to Windows monitoring).

=== Troubleshooting Kerberos Error Messages ===

<blockquote>Cannot determine realm for numeric host address</blockquote>

* If you enter an IP address for the device id, make sure that the address is resolvable to a name.

<blockquote>Server not found in Kerberos database</blockquote>

* More often than not, this error indicates a DNS issue in which the domain controller is unable to locate the specified server by either IP address or name.  The best solution varies over different domains and it is left to the user to decide which is best for their environment.

=== Troubleshooting Kerberos Authentication with Wireshark ===

There are many reasons for kerberos authentication not to work, and a lot of them result in the following unhelpful error message.

<blockquote>kerberos authGSSClientStep failed (None)</blockquote>

While Zenoss is unable to extract a useful error message when this occurs, it turns out that Wireshark can get useful errors by looking at the kerberos packets sent between Zenoss, your domain controller (''zWinKDC'') and the monitored Windows server. Let's walk through an example of using [http://www.wireshark.org/ Wireshark] to resolve an ''authGSSClientStep failed'' error.

# First install Wireshark on your system. It's GUI is easier to use than the command line equivalent.
# Next you will need to create a packet capture file on your Zenoss server. Assuming the Windows server you're trying to monitor is ''192.0.2.101'' and the domain controller (''zWinKDC'') is ''203.0.113.10'', you would run the following command as the root user on your Zenoss server.
#: <console>tcpdump -s0 -iany -w kerberdebug.pcap host 192.0.2.101 or host 203.0.113.10</console>
#: This will start capturing all packets to or from those two IP addresses. It will continue to capture these packets until you type ''CTRL-C''.
# Now you should attempt to remodel the Windows server where you're encountering the error. Once it completes, and fails, again you should go back to the terminal where tcpdump is running and type ''CTRL-C''. You will now have a ''kerberdebug.pcap'' file in the directory where you ran the command.
# Copy ''kerberdebug.pcap'' to your system where you installed Wireshark. Start Wireshark and open ''kerberdebug.pcap''. You should see something like the following.
#: [[File:windows-kerberos-wireshark.png]]

You'll see that there's a ''KRB5KRB_AP_ERR_SKEW'' error. Searching for this specific error code will quickly show that it occurs when the kerberos client and server don't have their time's synchronized. There's a tolerance for some difference, but in this case it was a big difference due to misconfiguration.

There are some kerberos errors you'll see in the packets that a completely normal part of negotiation and won't lead to any problems. You should ignore the following errors shown in Wireshark:

* ''KRB5KRB_API_ERR_TKT_EXPIRED'': Zenoss will subsequently request a new ticket when this occurs.
* ''KRB5KRB_ERR_PREAUTH_REQUIRED'': This is a normal part of kerberos negotiation.
* ''KRB5KRB_ERR_RESPONSE_TOO_BIG'': Most requests won't fit in UDP. Zenoss will automatically switch to TCP.

You'll also see other kerberos messages that are normal. You should ignore these kerberos messages shown by Wireshark:

* ''TGS-REQ''
* ''AS-REQ''

The following are the most common errors:
* ''KRB5KRB_AP_ERR_SKEW'': As shown in the above example. A clock synchronization issue.
* ''KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN'': This can happen if ''zWinRMServerName'' resolves to the server's IP address, but is not the name the server is known by in Active Directory. This will also be the error if you don't enter a ''zWinRMServerName'' and the reverse resolution of the device's manage IP address resolves to a name that doesn't match the server's name in Active Directory.  Typical solutions to this are to add the name to the /etc/hosts file or to directly use the IP address of the server.

=== Troubleshooting on Resource Manager 4.1.1 ===

In some cases updating the Microsoft Windows ZenPack on Zenoss Resource Manager 4.1.1 may result in the ''zenhub'' daemon not starting. The error message will contain ''AttributeError: zDBInstancesPassword''. If you encounter this issue, install the ZenPack again.

If there are existing SQL server instances being monitored, make sure to reconfigure ''zDBInstances'' property since the ''zDBInstancesPassword'' property no longer exists.

=== Troubleshooting Services ===

If you see an event error that shows "The maximum number of concurrent operations for this user has been exceeded", you will need to increase the number of concurrent operations per user in the winrm config.
For example:
* winrm set winrm/config/service '@{MaxConcurrentOperationsPerUser="5000"}'

If you see an "Index out of range" error, this could indicate a low number of available file handles in Linux.  The default is 1024.  To view this information on your system, enter 'ulimit -n'.  To increase this limit, edit your /etc/sysctl.conf file and set fs.file-max to a sufficiently large number.
For example:
* vi /etc/sysctl.conf
* fs.file-max=10000

=== Troubleshooting monitoring ===

The first step in troubleshooting any monitoring issues is to scan the zenpython log for errors.

While monitoring, possible network connectivity issues may occur while trying to complete the Get-Counter command.
If you experience OperationTimeout errors, it may be a solution to decrease value of ''zWinPerfmonInterval'' property to 30 seconds.

Other timeout issues on a domain could involve having a large Kerberos token.  This could be caused by the user belonging to a large number of groups.  See https://support.microsoft.com/en-us/kb/970875 for more information on the cause and resolution.  Possible side effects of a large token include high CPU usage on the Windows server.

== Zenoss Analytics ==

This ZenPack provides additional support for Zenoss Analytics. Perform the
following steps to install extra reporting resources into Zenoss Analytics
after installing the ZenPack.

# Copy analytics-bundle.zip from <tt>$ZENHOME/ZenPacks/ZenPacks.zenoss.Microsoft.Windows*/ZenPacks/zenoss/Microsoft/Windows/analytics/</tt> on your Zenoss server.
# Navigate to Zenoss Analytics in your browser.
# From the Zenoss Instance list of options, select Internal Authentication.
# Login as an Analytics user with superuser privileges.
# Remove any existing ''Microsoft Windows ZenPack'' folder.
## Choose ''Repository'' from the ''View'' menu at the top of the page.
## Expand ''Public'' in the list of folders.
## Right-click on ''Microsoft Windows ZenPack'' folder and choose ''Delete''.
## Confirm deletion by clicking ''OK''.
# Add the new ''Microsoft Windows ZenPack'' folder.
## Choose ''Server Settings'' from the ''Manage'' menu at the top of the page.
## Choose ''Import'' in the left page.
## Remove checks from all check boxes.
## Click ''Choose File'' to import a data file.
## Choose the analytics-bundle.zip file copied from your Zenoss server.
## Click ''Import''.

You can now navigate back to the ''Microsoft Windows ZenPack'' folder in the repository to see the following resources added by the bundle.

;Domains
* Microsoft Windows Domain
* Microsoft Cluster Domain

;Ad Hoc Views
* Windows IIS Peak Usage
* Windows Interfaces Peak Usage

Domains can be used to create Ad Hoc views using the following steps.

# Choose ''Ad Hoc View'' from the ''Create'' menu.
# Click ''Domains'' at the top of the data chooser dialog.
# Expand ''Public'' then ''Microsoft Windows ZenPack''.
# Choose the ''Microsoft Windows Domain'' domain

== Installed Items ==

Installing this ZenPack will add the following items to your Zenoss system.

;Device Classes
* /Server/Microsoft
* /Server/Microsoft/Cluster
* /Server/Microsoft/Windows

;Configuration Properties
* zWinRMUser
* zWinRMPassword
* zWinRMServerName
* zWinRMPort
* zDBInstances
* zWinKDC
* zWinKeyTabFilePath
* zWinScheme
* zWinPerfmonInterval

;Modeler Plugins
* zenoss.winrm.CPUs
* zenoss.winrm.FileSystems
* zenoss.winrm.IIS
* zenoss.winrm.Interfaces
* zenoss.winrm.OperatingSystem
* zenoss.winrm.Processes
* zenoss.winrm.Routes
* zenoss.winrm.Services
* zenoss.winrm.Software
* zenoss.winrm.WinCluster
* zenoss.winrm.WinMSSQL

;Datasource Types
* Windows EventLog
* Windows IIS Site
* Windows Perfmon
* Windows Process
* Windows Service
* Windows Shell
* Windows PortCheck

;Monitoring Templates
* Device (in /Server/Microsoft)
* FileSystem (in /Server/Microsoft)
* ethernetCsmacd (in /Server/Microsoft)
* OSProcess (in /Server/Microsoft)
* OSProcess-2003 (in /Server/Microsoft)
* WinService (in /Server/Microsoft)
* Active Directory (in /Server/Microsoft)
* Active Directory 2008 (in /Server/Microsoft)
* Active Directory 2008R2 (in /Server/Microsoft)
* IIS (in /Server/Microsoft)
* IISADMIN (in /Server/Microsoft)
* IISSites (in /Server/Microsoft)
* MSExchangeInformationStore (in /Server/Microsoft)
* MSExchange2010IS (in /Server/Microsoft)
* MSExchange2013IS (in /Server/Microsoft)
* WinDBInstance (in /Server/Microsoft)
* WinSQLJob (in /Server/Microsoft)
* WinDatabase (in /Server/Microsoft)
* Cluster (in /Server/Microsoft)
* ClusterService (in /Server/Microsoft/Cluster)
* ClusterResource (in /Server/Microsoft/Cluster)
* ClusterNode (in /Server/Microsoft/Cluster)
* ClusterNetwork (in /Server/Microsoft/Cluster)
* ClusterDisk (in /Server/Microsoft/Cluster)
* ClusterInterface (in /Server/Microsoft/Cluster)

== Changes ==

;2.5.2
* Fix IIS Site Failed connection when monitoring Windows Server 2012 with IIS 8.5 (ZEN-21029)

;2.5.1
* Fix MicrosoftWindows - Unbound Cluster Error when modeling cluster (ZEN-20931)
* Fix MicrosoftWindows - list index out of range when modeling processes (ZEN-20932)
* Fix MicrosoftWindows - Documentation typo mistakes (ZEN-20940)

;2.5.0
* Windows Service monitoring improvements
* Added State column for MSSQL Databases
* Improved EventLog querying to allow use of XPath XML
* Enhancement Microsoft Windows - Update Cluster for failover cluster device (ZEN-18833)
* Added ability to enter trusted domain information in order to use a single domain user
* Documentation update:  Microsoft Windows - zenpython causes max cpu on target machine (ZEN-20542)
* Fix Analytics not extracting software data on windows devices (ZEN-19366)
* Fix Zenoss Windows Monitoring Spawning Thousands of Processes on Monitored Hosts (ZEN-18770)
* Fix Microsoft Windows ZenPack -> Blank page is displayed when open 'Instance name' link in new page for My SQL Device (ZEN-15464)
* Fix WinRM - ProcessDataSource.py results in "list index out of range" (ZEN-18823)
* Fix Microsoft Windows ZenPack - MSSQL Databases: Unable to monitor any databases if any databases have ' in name (ZEN-18838)
* Fix Microsoft Windows - Remove file systems with 0.00B Used/Free Bytes in File Systems component (ZEN-19213)
* Fix Microsoft Windows - Cluster event is in Unknown class (ZEN-18835)
* Fix Microsoft Windows - Database event is in Unknown class (ZEN-18836)
* Fix Microsoft Windows - Provide a better message if using an event log that does not exist (ZEN-19270)
* Fix Microsoft Windows - Remove IIS from default selected list of plugins (ZEN-19620)
* Fix Microsoft Windows - an event " WinRS: get-clusterservice : The term 'get-clusterservice' is not recognized..." (ZEN-20138)
* Fix Microsoft Windows - 'RecoveryModel' property is not displayed for SQL Enterprise 2005 (ZEN-20094)
* Fix error when modeling hosts with IPv6 addresses. (ZEN-20474)
* Fix WinRM for Windows server - Device Status should not use /Status/Ping (ZEN-19813)
* Fix Wiki page for MicrosoftWindows ZenPack - IISAdmin service (ZEN-19300)
* Fix WinRM Leaves Connections Open When Collection Fails Due to Native Language (ZEN-20514)
* Fix WinRM - "The referenced context has expired" (ZEN-18115)
* Fix Microsoft Windows - Windows cluster fails modeling for Task Scheduler traceback (ZEN-20438)

;2.4.9
* Fix Windows ZenPack - Cluster device does not add cluster nodes as devices on model (ZEN-19085)
* Fix WinService - "list index out of range" error (ZEN-19452)

;2.4.8
* Fix Microsoft Windows Zenpack - MSSQLSERVER service shows as down but received event saying db instance was down (ZEN-19323)

;2.4.7
* Fix Microsoft Windows ZenPack - no data returned for databases in MSSQLSERVER default instance (ZEN-19282)
* Fix Microsoft Windows ZenPack - services are not being monitored (ZEN-19284)

;2.4.6
* Fix Microsoft Windows ZenPack doesn't create events for MS SQL Jobs/Instances (ZEN-18680)
* Fix WinRM Polling causing partial Event Creation (ZEN-18757)
* Fix Microsoft Windows - Connection count is high (ZEN-18947)
* Fix Microsoft Windows: DCDiag reports Access Denied during tests (ZEN-19188)

;2.4.5
* Fix MSSQL Components Generate Clear Event When PowerShell Script Fails (ZEN-18234)
* Fix WinRM ZenPack missing thresholds which should be available out-of-box (ZEN-16024)
* Fix Microsoft Windows - modeling MSSQLSERVER instance on 2012 cluster does not return databases, jobs, backups (ZEN-18811)
* Fix Microsoft Windows ZenPack - WinMSSQL plugin breaks modeling (ZEN-18533)
* Windows 2003 will no longer be supported

;2.4.4
* Fix extra points being sent into "Windows Shell" datasource parsers. (ZEN-18049)
* With the ending of support by Microsoft for Windows 2003, this is the last version of the ZenPack to support Windows 2003.

;2.4.3
* Fix Port Checker in Microsoft Windows ZP 2.4.2 Results in Errors (ZEN-17893)

;2.4.2
* Fix poor performance of SQL Server monitoring of large number of databases. (ZEN-17535)
* Fix poor performance of SQL Server modeling of large number of databases. (ZEN-17669)

;2.4.1
* Fixed Data from MS Exchange monitoring template is written to MSExchangeIS service component (ZEN-17566)

;2.4.0
* Added DCDiag tests for Active Directory monitoring
* Added Port checking ability for Active Directory and other monitoring
* Improved Kerberos error messages
* Improved Custom Command feedback from Powershell scripts (ZEN-16834)
* Improved automatic selection of device class monitoring templates to be run (ZEN-17059)
* Fix Windows service datasource does not clear collection errors (ZEN-16802)
* Fix EventLogDatasource ignores $max_age (ZEN-16564)
* Fix Event Log Datasource does not escape tab characters (ZEN-15911)
* Fix EventLogDataSource processes events from newest to oldest (ZEN-16565)
* Fix WindowsEventLog will continuously fetch the same events generating false positives if the last event doesn't contain a message/summary (ZEN-17366)
* Fix IIS-Request Rate graph should be removed from Graphs as it was divided into two (ZEN-17045)
* Fix txwinrm:  Wrong number of arguments given (ZEN-16790)
* Fix Some software is missing after model (ZEN-16574)
* Fix OperatingSystem Modeler Broken (ZEN-16799)
* Fix WinRM Software Modeler Parsing Traceback (ZEN-16224)
* Fix Windows Zenpack Impact relationships are inconsistent (ZEN-16796)
* Fix WinRM ZenPack missing thresholds which should be available out-of-box (ZEN-16024)
* Fix No event generated for failed modeling of Windows Device (ZEN-16195)
* Fix Microsoft Windows bad counter events in wrong event class (ZEN-16558)
* Fix link is absent on Owner Node for Cluster/Services and Resources components (ZEN-15784)
* Fix Microsoft Windows bad counter events in wrong event class (ZEN-16558)
* Fix No event generated for failed modeling of Windows Device (ZEN-16195)
* Fix WinRM ZenPack missing thresholds which should be available out-of-box (ZEN-16024)
* Fix Microsoft.Windows - link is absent on Owner Node for Cluster/Services and Resources components (ZEN-15784)
* Fix New Windows ZenPack - Working with templates throws 'NoneType' exception (ZEN-17318)
* Fix Microsoft.Windows - unable to model device using Kerberos authentication on Centos 5 (ZEN-16546)
* Fix Cannot "View and edit details"  on datasource Windows Eventlog (ZEN-17240)

;2.3.2
* Fix traceback during Software modeling (ZEN-16224)
* Fix Event Log datasource ignoring max age field (ZEN-16564)
* Fix Event log datasource does not escape tab characters (ZEN-15911)
* Fix wrong number of arguments given (ZEN-16790)
* Fix Powershell script not showing feedback on Custom Command datasource (ZEN-16834)
* Fix traceback during Operating System modeling (ZEN-16799)

;2.3.1
* Fix significant memory leak when using kerberos authentication. (ZEN-16261)
* Support "Wow6432Node" uninstall key for software inventory. (ZEN-16574)

;2.3.0
* Update Windows Service monitoring template to allow for monitoring by start mode
* Fix memory leak with kerberos
* Fix moving device to a different class

;2.2.1
* Fix Windows 2003 modeling/monitoring
* Add log message during install
* Re-authenticate through kerberos if connection is broken
* Small bug fixes

;2.2.0
* Payload encryption over kerberos connections
* Updated Events to use Get-WinEvent cmdlet
* Updated Software modeler to query registry instead of Win32_Product
* Updated FileSystems to show mapped network drives and mounted volumes
* Support for Zenoss Analytics
* Numerous bug fixes

;2.1.3
* Zenoss 5 compatibility fixes.

;2.1.2
* Added WinCommand notification action
* Support for monitoring fail-over clustered MSSQL instances
* Support for monitoring Windows event logs
* Numerous bug fixes

;2.1.0
* Support for Service Impact
* Support for Microsoft Exchange 2010 and Microsoft Exchange 2013
* Ability to monitor Microsoft SQL Server using Windows Authenticated user
* Fix Exchange 2007 counters
* Fix cluster and node relationship
* Fix virtual network adapter monitoring

;2.0.3
* Reduce possibility of gaps in perfmon collection. ([https://jira.zenoss.com/browse/ZEN-10600 ZEN-10600])
* Add zWinRMServerName property. ([https://jira.zenoss.com/browse/ZEN-9712 ZEN-9712])
* Support for IIS 7-8 without IIS 6 compatibility.
* Honor sequence in process monitoring. ([https://jira.zenoss.com/browse/ZEN-10777 ZEN-10777])
* Fix cluster modeling for long server names. ([https://jira.zenoss.com/browse/ZEN-10572 ZEN-10572])
* Support TALES in Windows Shell custom command script. ([https://jira.zenoss.com/browse/ZEN-10426 ZEN-10426])
* Fix custom parser issue with Windows Shell datasource. ([https://jira.zenoss.com/browse/ZEN-10365 ZEN-10365])
* Handle null software install date. ([https://jira.zenoss.com/browse/ZEN-10361 ZEN-10361])
* Handle null process socket designation. ([https://jira.zenoss.com/browse/ZEN-10360 ZEN-10360])
* Model interface speed as integer. ([https://jira.zenoss.com/browse/ZEN-9608 ZEN-9608])
* Change WinRS success events from info to clear severity.
* Fix leaking of active operations on Windows server.
* Add missing counter details to missing counter events.
* Fix Windows Shell collection on empty results.
* Fix Windows Perfmon collection with cycletime > 600.

;2.0.2
* Fix build issue that made ZenPack unavailable from catalog.

;2.0.1
* Eliminate need for manual kerberos configuration on Enterprise Linux 5. ([https://jira.zenoss.com/browse/ZEN-9389 ZEN-9389])
* Fix "WinServiceLog: failed collection" error. ([https://jira.zenoss.com/browse/ZEN-9607 ZEN-9607])
* Provide more helpful error if AllowUnencrypted is disabled. ([https://jira.zenoss.com/browse/ZEN-9524 ZEN-9524])

;2.0.0
* Initial release of new Windows support using WinRM instead of DCOM/RPC.
